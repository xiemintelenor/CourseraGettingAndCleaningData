modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSRP")) + labs(x = "Time", y = "rsrp"))
View(MPM_cell)
View(Modem_data)
modem_plot1 <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rssi, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSSI")) + labs(x = "Time", y = "rssi"))
modem_plot1 <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rssi, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(modem_plot1 + ggtitle(paste ("Node", node_id,"RSSI")) + labs(x = "Time", y = "rssi"))
Ping_data <- subset (Ping_data, timestamp> start_time & timestamp <end_time)
plot(x = as.POSIXct(Ping_data$timestamp, origin="1970-01-01"), y = Ping_data$rtt , type = 'l', xlab = 'Time', ylab = 'RTT' )
Ping_data <- subset (Ping_data, timestamp> start_time & timestamp <end_time)
plot(x = as.POSIXct(Ping_data$timestamp, origin="1970-01-01"), y = Ping_data$rtt , type = 'l', xlab = 'Time', ylab = 'RTT' , main = paste ("Node", node_id,"Ping test - RTT")
Ping_data <- subset (Ping_data, timestamp> start_time & timestamp <end_time)
plot(x = as.POSIXct(Ping_data$timestamp, origin="1970-01-01"), y = Ping_data$rtt , type = 'l', xlab = 'Time', ylab = 'RTT' , main = paste ("Node", node_id,"Ping test - RTT"))
# start_time <- 1529676000  # corresponding to 2018-06-22 16:00:00 local time (CEST)
start_time <- 1529679600 # corresponding to 2018-06-22 17:00:00 local time (CEST)
end_time <- 1529704800 # corresponding to 2018-06-23 00:00:00 local time (CEST)
Modem_data <- subset (Modem_data, timestamp> start_time & timestamp <end_time)
modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSRP")) + labs(x = "Time", y = "rsrp"))
modem_plot1 <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rssi, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(modem_plot1 + ggtitle(paste ("Node", node_id,"RSSI")) + labs(x = "Time", y = "rssi"))
Ping_data <- subset (Ping_data, timestamp> start_time & timestamp <end_time)
plot(x = as.POSIXct(Ping_data$timestamp, origin="1970-01-01"), y = Ping_data$rtt , type = 'l', xlab = 'Time', ylab = 'RTT' , main = paste ("Node", node_id,"Ping test - RTT"))
View(Ping_data)
aggregate(list(rtt = Ping_data$rtt), list(time_quarter= cut(Ping_data$timestamp)), mean)
install.packages("smooth")
install.packages("accelerometry")
library(accelerometry)
7*60*60
Ping_data <- subset (Ping_data, timestamp> start_time & timestamp <end_time)
#library(accelerometry)
#rtt_ma <- movingaves(x = Ping_data$rtt, window = )
plot(x = as.POSIXct(Ping_data$timestamp, origin="1970-01-01"), y = Ping_data$rtt , type = 'l', xlab = 'Time', ylab = 'RTT' , main = paste ("Node", node_id,"Ping test - RTT"))
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
View(HB_data)
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
web_plot1 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = browser, colour = browser)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
web_plot1 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot2 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
View(HB_data_node)
range(HB_data_node$timestamp)
web_plot2 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot2 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot3 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = fullyloaded, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot3 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot3 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot3 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
web_plot1 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot4 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot4 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot2 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot2 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot5 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot5 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot3 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot3 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
web_plot6 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot6 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
View(HB_data_good)
HB_data_good$ops
HB_data$ops
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
web_plot1 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot4 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot4 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot7 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = ops, colour = ops)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot7 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot2 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot2 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot5 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot5 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot8 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = ops, colour = ops)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot8 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot3 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot3 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
web_plot6 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot6 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
web_plot9 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = ops, colour = ops)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot9 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/Projects/MONROE/RBK/TnN Norway")
#setwd("/Users/MinXieNTNU/Documents/Projects/MONROE/RBK/TnN Norway")
library(tidyr)
library(stringr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(xlsx)
#library (plotly)
dir_name <- "~/Documents/Projects/MONROE/RBK/WQ Query Data/"
HB_name <- "cql_monroe_exp_headless_browser_"
NT_name <- "cql_monroe_exp_nettest_"
Ping_name <- "cql_monroe_exp_ping_"
modem_name <- "cql_monroe_meta_device_modem_"
event_name <- "cql_monroe_meta_node_event_"
sensor_name <- "cql_monroe_meta_node_sensor_"
HB_dir <- paste (dir_name, "Exp_Web", sep = "")
#file_name <- paste (dir_name, HB_name, "360.csv", sep="")
library(rjson)
library(jsonlite)
library(purrr)
filenames <- list.files(path = HB_dir, pattern = "*.json", full.names = TRUE)
HB_data <- purrr::map_df(filenames, function(x) {
purrr::map(jsonlite::fromJSON(x), function(y) ifelse(is.null(y), NA, y))
})
good <- complete.cases(HB_data)
HB_data_good <- HB_data[good,]
HB_data_node <- dplyr:: filter(HB_data, nodeid == node_id)
#source("~/Documents/Projects/MONROE/RBK/MC_sig_filter.R")
#cells <- MC_sig_filter(MC_sig, "242013059517569")
source("~/Documents/Projects/MONROE/RBK/MC_sig_filter.R")
MONROE_node <- data.frame(id = c("360","361", "371"), IMSI = c("242013059517570", "242013059517569", "242013080423652"))
node_id <- readline(prompt='Enter node ID: ')
node_IMSI <- as.character(filter(MONROE_node, id == node_id)$IMSI)
cells <- MC_sig_filter(MC_sig, node_IMSI)
#file_name <- paste (dir_name, HB_name, "360.csv", sep="")
library(rjson)
library(jsonlite)
library(purrr)
filenames <- list.files(path = HB_dir, pattern = "*.json", full.names = TRUE)
HB_data <- purrr::map_df(filenames, function(x) {
purrr::map(jsonlite::fromJSON(x), function(y) ifelse(is.null(y), NA, y))
})
good <- complete.cases(HB_data)
HB_data_good <- HB_data[good,]
HB_data_node <- dplyr:: filter(HB_data, nodeid == node_id)
file_name <- paste (dir_name, NT_name, node_id, ".csv", sep="")
Nettest_data = read.csv (file_name, header = TRUE, sep = ",")
file_name <- paste (dir_name, Ping_name, node_id, ".csv", sep="")
Ping_data = read.table(file_name, header = TRUE, sep = ",", na.strings = c("NA", "NULL"))#, stringsAsFactors = F)
Ping_data = dplyr:: filter(Ping_data, rtt != " NULL")
file_name <- paste (dir_name, modem_name, node_id, ".csv", sep="")
Modem_data = read.table (file_name, header = TRUE, sep = ",")
# start_time <- 1529676000  # corresponding to 2018-06-22 16:00:00 local time (CEST)
start_time <- 1529852400 # corresponding to 2018-06-24 17:00:00 local time (CEST)
end_time <- 1529877600 # corresponding to 2018-06-25 00:00:00 local time (CEST)
Modem_data <- subset (Modem_data, timestamp> start_time & timestamp <end_time)
modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 4, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSRP")) + labs(x = "Time", y = "rsrp"))
Modem_data <- subset (Modem_data, timestamp> start_time & timestamp <end_time)
modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSRP")) + labs(x = "Time", y = "rsrp"))
Modem_data <- subset (Modem_data, timestamp> start_time & timestamp <end_time)
Modem_data <- dplyr:: filter(Modem_data, rsrp != " NULL")
modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSRP")) + labs(x = "Time", y = "rsrp"))
modem_plot1 <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rssi, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(modem_plot1 + ggtitle(paste ("Node", node_id,"RSSI")) + labs(x = "Time", y = "rssi"))
Ping_data <- subset (Ping_data, timestamp> start_time & timestamp <end_time)
#library(accelerometry)
#rtt_ma <- movingaves(x = Ping_data$rtt, window = )
plot(x = as.POSIXct(Ping_data$timestamp, origin="1970-01-01"), y = Ping_data$rtt , type = 'l', xlab = 'Time', ylab = 'RTT' , main = paste ("Node", node_id,"Ping test - RTT"))
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
web_plot1 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot4 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot4 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot7 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = ops, colour = ops)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot7 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot2 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = browser, colour = browser)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot2 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot5 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = protocol, colour = protocol)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot5 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot8 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = ops, colour = ops)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot8 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
Modem_data <- subset (Modem_data, timestamp> start_time & timestamp <end_time)
Modem_data <- dplyr:: filter(Modem_data, rsrp != " NULL")
#modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_line() + geom_point(size = 1, shape = 21, fill = "white")
modem_plot <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rsrp, group = frequency, colour = frequency)) + geom_point(size = 1, shape = 21, fill = "white")
print(modem_plot + ggtitle(paste ("Node", node_id,"RSRP")) + labs(x = "Time", y = "rsrp"))
modem_plot1 <- ggplot(data = Modem_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rssi, group = frequency, colour = frequency)) + geom_point(size = 1, shape = 21, fill = "white")
print(modem_plot1 + ggtitle(paste ("Node", node_id,"RSSI")) + labs(x = "Time", y = "rssi"))
HB_data <- subset (HB_data_node, timestamp> start_time & timestamp <end_time)
web_plot1 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = browser, colour = browser)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot1 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot4 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = protocol, colour = protocol)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot4 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot7 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = pageloadtime, group = ops, colour = ops)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot7 + ggtitle(paste ("Node", node_id,"Page Load Time")) + labs(x = "Time", y = "Page Load Time"))
web_plot2 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = browser, colour = browser)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot2 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot5 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = protocol, colour = protocol)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot5 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot8 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = firstpaint, group = ops, colour = ops)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot8 + ggtitle(paste ("Node", node_id,"First Paint")) + labs(x = "Time", y = "First Paint"))
web_plot3 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = browser, colour = browser)) + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot3 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
web_plot6 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = protocol, colour = protocol)) + geom_point(size = 1, shape = 21, fill = "white")
print(web_plot6 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
web_plot9 <- ggplot(data = HB_data, aes (x = as.POSIXct(timestamp, origin="1970-01-01"), y = rumspeedindex, group = ops, colour = ops)) +  geom_point(size = 1, shape = 21, fill = "white")
print(web_plot9 + ggtitle(paste ("Node", node_id,"Rum Speed Index")) + labs(x = "Time", y = "Rum Speed Index"))
library(swirl)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
ls()
class(plants)
dim(plants)
nrows
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
exit()
quit()
swirl()
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample (1:20, 10, replace = FALSE)
sample (1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), prob = c(0.3, 0.7))
sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
quit
exit
bye
bye()
set.seed(1)
rpois(5,2)
x <- rep(0:1,each =5)
x
swirl()
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
best("SC", "heart attack")
library(sqldf)
library(RSQLite)
library(proto)
library(gsubfn)
library(sqldf)
query1 <- sqldf::sqldf("select pwgtp1 from acs where AGEP <50")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(url, destfile = './acs.csv', method = 'curl' )
acs <- data.table(read.csv("./acs.csv"))
library(data.table)
acs <- data.table(read.csv("./acs.csv"))
query1 <- sqldf("select pwgtp1 from acs where AGEP <50")
query1
str(query1)
### Q3 - MySQL ###
query0 <- unique(acs$AGEP)
query2 <- sqldf("select distinct AGEP from acs")
query3 <- sqldf("select unique AGEP from acs")
query4 <- sqldf("selett distinct pwgtp1 from acs")
query5 <- sqldf("select AGEP where unique from acs")
query4 <- sqldf("select distinct pwgtp1 from acs")
query5 <- sqldf("select AGEP where unique from acs")
identical(query0, query2)
identical(query0, query3)
query3 <- sqldf("select unique AGEP from acs")
identical(query0, query4)
query0
query2
con <- url ("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines (con, n = 100)
close(con)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
lines[1]
lines[2]
lines[3]
lines
lines <- readLines(url)
df <- read.fwf(lines,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
# lines <- readLines(url)
df <- read.fwf(url,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[,4])
swirl()
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran <- tbl_df(mydf)
rm ("mydf")
cran
?select
select (cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter (cran, r_version == "3.1.1", country == "US")
?Comparison
filter (cran, country == "IN", version <= "3.0.2")
filter (cran, version <= "3.0.2", country == "IN")
filter (cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb/2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarise(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarise(group_by(cran, package), mean(size))
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter (pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
now()
this_moment <- now()
this_moment
hour(this_moment)
ymd('1989-05-17')
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd ('1989 May 17')
mdy('March 12, 1975')
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update (this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update (this_moment, hours = 1, minutes = 2)
this_moment <- update (this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone = 'America/New_York')
nyc
depart <- nyc + days(2)
depart
depart <- update (depart, hours = 17, minutes = 24)
depart <- update (depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes (50)
with_tz(arrive)
with_tz(arrive, tzone = 'Asia/Hong_Kong')
with_tz()
arrive <- with_tz(arrive, tzone = 'Asia/Hong_Kong')
with_tz(arrive, tzone = 'HKT')
with_tz(arrive, tzone = 'Asia/Hong_Kong')
skip()
arrive <- with_tz
arrive <- with_tz (arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy('June 17, 2008', tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages("TTR")
install.packages("quantmod")
install.packages("TTR")
install.packages("quantmod")
install.packages("quantmod")
#### Q5
library (quantmod)   # the installation of package quantmod was failed due to "locale" setup failure.
amzn <- getSymbols("AMZN", auto.assign = FALSE)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
# tried to set up locale based on instruction
# from https://stackoverflow.com/questions/9689104/installing-r-on-mac-warning-messages-setting-lc-ctype-failed-using-c
# type command on terminals:
# defaults write org.R-project.R force.LANG en_US.UTF-8
library(lubridate)
install.packages("lubridate")
# tried to set up locale based on instruction
# from https://stackoverflow.com/questions/9689104/installing-r-on-mac-warning-messages-setting-lc-ctype-failed-using-c
# type command on terminals:
# defaults write org.R-project.R force.LANG en_US.UTF-8
library(lubridate)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
setwd("~/Documents/Learning/Data Science/Course 3 - Cleaning Data/CourseraGettingAndCleaningData")
install.packages("data.table")
install.packages("reshape")
install.packages("reshape2")
library(data.table)
library(reshape2)
### Set working directory ###
setwd("~/Documents/Learning/Data Science/Course 3 - Cleaning Data/CourseraGettingAndCleaningData")
### Get data ###
dataURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if (!file.exists('./Data')) {dir.create('./Data')}
download.file(dataURL, destfile = "./Data/dataset.zip")
# unzip file
unzip (zipfile = "./Data/dataset.zip", exdir = "./Data")
list.files("./Data/UCI HAR Dataset/")
list.files("./Data/UCI HAR Dataset/", recursive = TRUE)
